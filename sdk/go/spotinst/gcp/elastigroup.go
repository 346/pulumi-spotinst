// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gcp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst elastigroup GCP resource.
type Elastigroup struct {
	s *pulumi.ResourceState
}

// NewElastigroup registers a new resource with the given unique name, arguments, and options.
func NewElastigroup(ctx *pulumi.Context,
	name string, args *ElastigroupArgs, opts ...pulumi.ResourceOpt) (*Elastigroup, error) {
	if args == nil || args.DesiredCapacity == nil {
		return nil, errors.New("missing required argument 'DesiredCapacity'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZones"] = nil
		inputs["backendServices"] = nil
		inputs["description"] = nil
		inputs["desiredCapacity"] = nil
		inputs["disks"] = nil
		inputs["drainingTimeout"] = nil
		inputs["fallbackToOndemand"] = nil
		inputs["gpu"] = nil
		inputs["healthCheckGracePeriod"] = nil
		inputs["instanceTypesCustoms"] = nil
		inputs["instanceTypesOndemand"] = nil
		inputs["instanceTypesPreemptibles"] = nil
		inputs["ipForwarding"] = nil
		inputs["labels"] = nil
		inputs["maxSize"] = nil
		inputs["metadatas"] = nil
		inputs["minSize"] = nil
		inputs["name"] = nil
		inputs["networkInterfaces"] = nil
		inputs["ondemandCount"] = nil
		inputs["preemptiblePercentage"] = nil
		inputs["scalingDownPolicies"] = nil
		inputs["scalingUpPolicies"] = nil
		inputs["serviceAccount"] = nil
		inputs["startupScript"] = nil
		inputs["subnets"] = nil
		inputs["tags"] = nil
	} else {
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["backendServices"] = args.BackendServices
		inputs["description"] = args.Description
		inputs["desiredCapacity"] = args.DesiredCapacity
		inputs["disks"] = args.Disks
		inputs["drainingTimeout"] = args.DrainingTimeout
		inputs["fallbackToOndemand"] = args.FallbackToOndemand
		inputs["gpu"] = args.Gpu
		inputs["healthCheckGracePeriod"] = args.HealthCheckGracePeriod
		inputs["instanceTypesCustoms"] = args.InstanceTypesCustoms
		inputs["instanceTypesOndemand"] = args.InstanceTypesOndemand
		inputs["instanceTypesPreemptibles"] = args.InstanceTypesPreemptibles
		inputs["ipForwarding"] = args.IpForwarding
		inputs["labels"] = args.Labels
		inputs["maxSize"] = args.MaxSize
		inputs["metadatas"] = args.Metadatas
		inputs["minSize"] = args.MinSize
		inputs["name"] = args.Name
		inputs["networkInterfaces"] = args.NetworkInterfaces
		inputs["ondemandCount"] = args.OndemandCount
		inputs["preemptiblePercentage"] = args.PreemptiblePercentage
		inputs["scalingDownPolicies"] = args.ScalingDownPolicies
		inputs["scalingUpPolicies"] = args.ScalingUpPolicies
		inputs["serviceAccount"] = args.ServiceAccount
		inputs["startupScript"] = args.StartupScript
		inputs["subnets"] = args.Subnets
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("spotinst:gcp/elastigroup:Elastigroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Elastigroup{s: s}, nil
}

// GetElastigroup gets an existing Elastigroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElastigroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ElastigroupState, opts ...pulumi.ResourceOpt) (*Elastigroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["backendServices"] = state.BackendServices
		inputs["description"] = state.Description
		inputs["desiredCapacity"] = state.DesiredCapacity
		inputs["disks"] = state.Disks
		inputs["drainingTimeout"] = state.DrainingTimeout
		inputs["fallbackToOndemand"] = state.FallbackToOndemand
		inputs["gpu"] = state.Gpu
		inputs["healthCheckGracePeriod"] = state.HealthCheckGracePeriod
		inputs["instanceTypesCustoms"] = state.InstanceTypesCustoms
		inputs["instanceTypesOndemand"] = state.InstanceTypesOndemand
		inputs["instanceTypesPreemptibles"] = state.InstanceTypesPreemptibles
		inputs["ipForwarding"] = state.IpForwarding
		inputs["labels"] = state.Labels
		inputs["maxSize"] = state.MaxSize
		inputs["metadatas"] = state.Metadatas
		inputs["minSize"] = state.MinSize
		inputs["name"] = state.Name
		inputs["networkInterfaces"] = state.NetworkInterfaces
		inputs["ondemandCount"] = state.OndemandCount
		inputs["preemptiblePercentage"] = state.PreemptiblePercentage
		inputs["scalingDownPolicies"] = state.ScalingDownPolicies
		inputs["scalingUpPolicies"] = state.ScalingUpPolicies
		inputs["serviceAccount"] = state.ServiceAccount
		inputs["startupScript"] = state.StartupScript
		inputs["subnets"] = state.Subnets
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("spotinst:gcp/elastigroup:Elastigroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Elastigroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Elastigroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Elastigroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// List of availability zones for the group.
func (r *Elastigroup) AvailabilityZones() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["availabilityZones"])
}

// Describes the backend service configurations.
func (r *Elastigroup) BackendServices() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["backendServices"])
}

// The region your GCP group will be created in.
func (r *Elastigroup) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The desired number of instances the group should have at any time.
func (r *Elastigroup) DesiredCapacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["desiredCapacity"])
}

func (r *Elastigroup) Disks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["disks"])
}

// Time (seconds) the instance is allowed to run after it is detached from the group. This is to allow the instance time to drain all the current TCP connections before terminating it.
func (r *Elastigroup) DrainingTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["drainingTimeout"])
}

func (r *Elastigroup) FallbackToOndemand() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["fallbackToOndemand"])
}

// Defines the GPU configuration.
func (r *Elastigroup) Gpu() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["gpu"])
}

// Period of time (seconds) to wait for VM to reach healthiness before monitoring for unhealthiness.
func (r *Elastigroup) HealthCheckGracePeriod() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["healthCheckGracePeriod"])
}

// Defines a set of custom instance types. Required if instance_types_preemptible and instance_types_on_demand are not set.
func (r *Elastigroup) InstanceTypesCustoms() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instanceTypesCustoms"])
}

func (r *Elastigroup) InstanceTypesOndemand() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceTypesOndemand"])
}

// The preemptible VMs instance type. To maximize cost savings and market availability, select as many types as possible. Required if instance_types_on_demand is not set.
func (r *Elastigroup) InstanceTypesPreemptibles() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instanceTypesPreemptibles"])
}

func (r *Elastigroup) IpForwarding() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ipForwarding"])
}

// Array of objects with key-value pairs.
func (r *Elastigroup) Labels() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["labels"])
}

// The maximum number of instances the group should have at any time.
func (r *Elastigroup) MaxSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxSize"])
}

// Array of objects with key-value pairs.
func (r *Elastigroup) Metadatas() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["metadatas"])
}

// The minimum number of instances the group should have at any time.
func (r *Elastigroup) MinSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minSize"])
}

// Name of this access configuration.
func (r *Elastigroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Array of objects representing the network configuration for the elastigroup.
func (r *Elastigroup) NetworkInterfaces() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networkInterfaces"])
}

func (r *Elastigroup) OndemandCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ondemandCount"])
}

// Percentage of Preemptible VMs to spin up from the "desired_capacity".
func (r *Elastigroup) PreemptiblePercentage() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["preemptiblePercentage"])
}

// Contains scaling policies for scaling the Elastigroup down.
func (r *Elastigroup) ScalingDownPolicies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scalingDownPolicies"])
}

// Contains scaling policies for scaling the Elastigroup up.
func (r *Elastigroup) ScalingUpPolicies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scalingUpPolicies"])
}

// The email of the service account in which the group instances will be launched.
func (r *Elastigroup) ServiceAccount() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceAccount"])
}

// Create and run your own startup scripts on your virtual machines to perform automated tasks every time your instance boots up.
func (r *Elastigroup) StartupScript() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["startupScript"])
}

// A list of regions and subnets.
func (r *Elastigroup) Subnets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subnets"])
}

// Tags to mark created instances.
func (r *Elastigroup) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Elastigroup resources.
type ElastigroupState struct {
	// List of availability zones for the group.
	AvailabilityZones interface{}
	// Describes the backend service configurations.
	BackendServices interface{}
	// The region your GCP group will be created in.
	Description interface{}
	// The desired number of instances the group should have at any time.
	DesiredCapacity interface{}
	Disks interface{}
	// Time (seconds) the instance is allowed to run after it is detached from the group. This is to allow the instance time to drain all the current TCP connections before terminating it.
	DrainingTimeout interface{}
	FallbackToOndemand interface{}
	// Defines the GPU configuration.
	Gpu interface{}
	// Period of time (seconds) to wait for VM to reach healthiness before monitoring for unhealthiness.
	HealthCheckGracePeriod interface{}
	// Defines a set of custom instance types. Required if instance_types_preemptible and instance_types_on_demand are not set.
	InstanceTypesCustoms interface{}
	InstanceTypesOndemand interface{}
	// The preemptible VMs instance type. To maximize cost savings and market availability, select as many types as possible. Required if instance_types_on_demand is not set.
	InstanceTypesPreemptibles interface{}
	IpForwarding interface{}
	// Array of objects with key-value pairs.
	Labels interface{}
	// The maximum number of instances the group should have at any time.
	MaxSize interface{}
	// Array of objects with key-value pairs.
	Metadatas interface{}
	// The minimum number of instances the group should have at any time.
	MinSize interface{}
	// Name of this access configuration.
	Name interface{}
	// Array of objects representing the network configuration for the elastigroup.
	NetworkInterfaces interface{}
	OndemandCount interface{}
	// Percentage of Preemptible VMs to spin up from the "desired_capacity".
	PreemptiblePercentage interface{}
	// Contains scaling policies for scaling the Elastigroup down.
	ScalingDownPolicies interface{}
	// Contains scaling policies for scaling the Elastigroup up.
	ScalingUpPolicies interface{}
	// The email of the service account in which the group instances will be launched.
	ServiceAccount interface{}
	// Create and run your own startup scripts on your virtual machines to perform automated tasks every time your instance boots up.
	StartupScript interface{}
	// A list of regions and subnets.
	Subnets interface{}
	// Tags to mark created instances.
	Tags interface{}
}

// The set of arguments for constructing a Elastigroup resource.
type ElastigroupArgs struct {
	// List of availability zones for the group.
	AvailabilityZones interface{}
	// Describes the backend service configurations.
	BackendServices interface{}
	// The region your GCP group will be created in.
	Description interface{}
	// The desired number of instances the group should have at any time.
	DesiredCapacity interface{}
	Disks interface{}
	// Time (seconds) the instance is allowed to run after it is detached from the group. This is to allow the instance time to drain all the current TCP connections before terminating it.
	DrainingTimeout interface{}
	FallbackToOndemand interface{}
	// Defines the GPU configuration.
	Gpu interface{}
	// Period of time (seconds) to wait for VM to reach healthiness before monitoring for unhealthiness.
	HealthCheckGracePeriod interface{}
	// Defines a set of custom instance types. Required if instance_types_preemptible and instance_types_on_demand are not set.
	InstanceTypesCustoms interface{}
	InstanceTypesOndemand interface{}
	// The preemptible VMs instance type. To maximize cost savings and market availability, select as many types as possible. Required if instance_types_on_demand is not set.
	InstanceTypesPreemptibles interface{}
	IpForwarding interface{}
	// Array of objects with key-value pairs.
	Labels interface{}
	// The maximum number of instances the group should have at any time.
	MaxSize interface{}
	// Array of objects with key-value pairs.
	Metadatas interface{}
	// The minimum number of instances the group should have at any time.
	MinSize interface{}
	// Name of this access configuration.
	Name interface{}
	// Array of objects representing the network configuration for the elastigroup.
	NetworkInterfaces interface{}
	OndemandCount interface{}
	// Percentage of Preemptible VMs to spin up from the "desired_capacity".
	PreemptiblePercentage interface{}
	// Contains scaling policies for scaling the Elastigroup down.
	ScalingDownPolicies interface{}
	// Contains scaling policies for scaling the Elastigroup up.
	ScalingUpPolicies interface{}
	// The email of the service account in which the group instances will be launched.
	ServiceAccount interface{}
	// Create and run your own startup scripts on your virtual machines to perform automated tasks every time your instance boots up.
	StartupScript interface{}
	// A list of regions and subnets.
	Subnets interface{}
	// Tags to mark created instances.
	Tags interface{}
}
