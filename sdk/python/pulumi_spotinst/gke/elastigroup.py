# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Elastigroup(pulumi.CustomResource):
    cluster_id: pulumi.Output[str]
    """
    The name of the GKE cluster you wish to import.
    """
    cluster_zone_name: pulumi.Output[str]
    """
    The zone where the cluster is hosted.
    """
    desired_capacity: pulumi.Output[int]
    """
    The desired number of instances the group should have at any time.
    """
    instance_types_ondemand: pulumi.Output[str]
    instance_types_preemptibles: pulumi.Output[list]
    """
    The preemptible VMs instance type. To maximize cost savings and market availability, select as many types as possible. Required if instance_types_on_demand is not set.
    """
    max_size: pulumi.Output[int]
    """
    The maximum number of instances the group should have at any time.
    """
    min_size: pulumi.Output[int]
    """
    The minimum number of instances the group should have at any time.
    """
    name: pulumi.Output[str]
    """
    The group name.
    """
    node_image: pulumi.Output[str]
    """
    The image that will be used for the node VMs. Possible values: COS, UBUNTU.
    """
    preemptible_percentage: pulumi.Output[int]
    """
    The percentage of preemptible VMs that would spin up from the desired capacity (range: 0-100).
    """
    def __init__(__self__, resource_name, opts=None, cluster_id=None, cluster_zone_name=None, desired_capacity=None, instance_types_ondemand=None, instance_types_preemptibles=None, max_size=None, min_size=None, name=None, node_image=None, preemptible_percentage=None, __name__=None, __opts__=None):
        """
        Provides a Spotinst elastigroup GKE resource.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The name of the GKE cluster you wish to import.
        :param pulumi.Input[str] cluster_zone_name: The zone where the cluster is hosted.
        :param pulumi.Input[int] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[list] instance_types_preemptibles: The preemptible VMs instance type. To maximize cost savings and market availability, select as many types as possible. Required if instance_types_on_demand is not set.
        :param pulumi.Input[int] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[int] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: The group name.
        :param pulumi.Input[str] node_image: The image that will be used for the node VMs. Possible values: COS, UBUNTU.
        :param pulumi.Input[int] preemptible_percentage: The percentage of preemptible VMs that would spin up from the desired capacity (range: 0-100).
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if cluster_id is None:
            raise TypeError('Missing required property cluster_id')
        __props__['cluster_id'] = cluster_id

        if cluster_zone_name is None:
            raise TypeError('Missing required property cluster_zone_name')
        __props__['cluster_zone_name'] = cluster_zone_name

        if desired_capacity is None:
            raise TypeError('Missing required property desired_capacity')
        __props__['desired_capacity'] = desired_capacity

        __props__['instance_types_ondemand'] = instance_types_ondemand

        __props__['instance_types_preemptibles'] = instance_types_preemptibles

        __props__['max_size'] = max_size

        __props__['min_size'] = min_size

        if name is None:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        __props__['node_image'] = node_image

        __props__['preemptible_percentage'] = preemptible_percentage

        super(Elastigroup, __self__).__init__(
            'spotinst:gke/elastigroup:Elastigroup',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

