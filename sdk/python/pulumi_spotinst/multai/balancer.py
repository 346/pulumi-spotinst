# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Balancer(pulumi.CustomResource):
    connection_timeouts: pulumi.Output[dict]
    dns_cname_aliases: pulumi.Output[list]
    name: pulumi.Output[str]
    """
    The balancer name. May contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    """
    scheme: pulumi.Output[str]
    tags: pulumi.Output[list]
    """
    A list of key:value paired tags.
    """
    def __init__(__self__, resource_name, opts=None, connection_timeouts=None, dns_cname_aliases=None, name=None, scheme=None, tags=None, __name__=None, __opts__=None):
        """
        Provides a Spotinst Multai Balancer.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] connection_timeouts
        :param pulumi.Input[list] dns_cname_aliases
        :param pulumi.Input[str] name: The balancer name. May contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
        :param pulumi.Input[str] scheme
        :param pulumi.Input[list] tags: A list of key:value paired tags.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['connection_timeouts'] = connection_timeouts

        __props__['dns_cname_aliases'] = dns_cname_aliases

        if name is None:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        __props__['scheme'] = scheme

        __props__['tags'] = tags

        super(Balancer, __self__).__init__(
            'spotinst:multai/balancer:Balancer',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

