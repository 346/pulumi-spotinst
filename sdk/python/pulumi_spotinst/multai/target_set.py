# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class TargetSet(pulumi.CustomResource):
    balancer_id: pulumi.Output[str]
    """
    The id of the balancer.
    """
    deployment_id: pulumi.Output[str]
    """
    The id of the deployment.
    """
    health_check: pulumi.Output[dict]
    name: pulumi.Output[str]
    """
    The name of the Target Set. Must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    """
    port: pulumi.Output[int]
    """
    The port on which the load balancer is listening.
    """
    protocol: pulumi.Output[str]
    """
    The protocol to allow connections to the target for the health check.
    """
    tags: pulumi.Output[list]
    """
    A list of key:value paired tags.
    """
    weight: pulumi.Output[int]
    """
    Defines how traffic is distributed between the Target Set.
    """
    def __init__(__self__, resource_name, opts=None, balancer_id=None, deployment_id=None, health_check=None, name=None, port=None, protocol=None, tags=None, weight=None, __name__=None, __opts__=None):
        """
        Provides a Spotinst Multai Target Set.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] balancer_id: The id of the balancer.
        :param pulumi.Input[str] deployment_id: The id of the deployment.
        :param pulumi.Input[dict] health_check
        :param pulumi.Input[str] name: The name of the Target Set. Must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
        :param pulumi.Input[int] port: The port on which the load balancer is listening.
        :param pulumi.Input[str] protocol: The protocol to allow connections to the target for the health check.
        :param pulumi.Input[list] tags: A list of key:value paired tags.
        :param pulumi.Input[int] weight: Defines how traffic is distributed between the Target Set.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if balancer_id is None:
            raise TypeError('Missing required property balancer_id')
        __props__['balancer_id'] = balancer_id

        if deployment_id is None:
            raise TypeError('Missing required property deployment_id')
        __props__['deployment_id'] = deployment_id

        if health_check is None:
            raise TypeError('Missing required property health_check')
        __props__['health_check'] = health_check

        __props__['name'] = name

        __props__['port'] = port

        if protocol is None:
            raise TypeError('Missing required property protocol')
        __props__['protocol'] = protocol

        __props__['tags'] = tags

        if weight is None:
            raise TypeError('Missing required property weight')
        __props__['weight'] = weight

        super(TargetSet, __self__).__init__(
            'spotinst:multai/targetSet:TargetSet',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

