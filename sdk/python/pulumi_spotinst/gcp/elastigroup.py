# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Elastigroup(pulumi.CustomResource):
    availability_zones: pulumi.Output[list]
    """
    List of availability zones for the group.
    """
    backend_services: pulumi.Output[list]
    """
    Describes the backend service configurations.
    """
    description: pulumi.Output[str]
    """
    The region your GCP group will be created in.
    """
    desired_capacity: pulumi.Output[int]
    """
    The desired number of instances the group should have at any time.
    """
    disks: pulumi.Output[list]
    draining_timeout: pulumi.Output[int]
    """
    Time (seconds) the instance is allowed to run after it is detached from the group. This is to allow the instance time to drain all the current TCP connections before terminating it.
    """
    fallback_to_ondemand: pulumi.Output[bool]
    gpu: pulumi.Output[list]
    """
    Defines the GPU configuration.
    """
    health_check_grace_period: pulumi.Output[int]
    """
    Period of time (seconds) to wait for VM to reach healthiness before monitoring for unhealthiness.
    """
    instance_types_customs: pulumi.Output[list]
    """
    Defines a set of custom instance types. Required if instance_types_preemptible and instance_types_on_demand are not set.
    """
    instance_types_ondemand: pulumi.Output[str]
    instance_types_preemptibles: pulumi.Output[list]
    """
    The preemptible VMs instance type. To maximize cost savings and market availability, select as many types as possible. Required if instance_types_on_demand is not set.
    """
    ip_forwarding: pulumi.Output[bool]
    labels: pulumi.Output[list]
    """
    Array of objects with key-value pairs.
    """
    max_size: pulumi.Output[int]
    """
    The maximum number of instances the group should have at any time.
    """
    metadatas: pulumi.Output[list]
    """
    Array of objects with key-value pairs.
    """
    min_size: pulumi.Output[int]
    """
    The minimum number of instances the group should have at any time.
    """
    name: pulumi.Output[str]
    """
    Name of this access configuration.
    """
    network_interfaces: pulumi.Output[list]
    """
    Array of objects representing the network configuration for the elastigroup.
    """
    ondemand_count: pulumi.Output[int]
    preemptible_percentage: pulumi.Output[int]
    """
    Percentage of Preemptible VMs to spin up from the "desired_capacity".
    """
    scaling_down_policies: pulumi.Output[list]
    """
    Contains scaling policies for scaling the Elastigroup down.
    """
    scaling_up_policies: pulumi.Output[list]
    """
    Contains scaling policies for scaling the Elastigroup up.
    """
    service_account: pulumi.Output[str]
    """
    The email of the service account in which the group instances will be launched.
    """
    startup_script: pulumi.Output[str]
    """
    Create and run your own startup scripts on your virtual machines to perform automated tasks every time your instance boots up.
    """
    subnets: pulumi.Output[list]
    """
    A list of regions and subnets.
    """
    tags: pulumi.Output[list]
    """
    Tags to mark created instances.
    """
    def __init__(__self__, resource_name, opts=None, availability_zones=None, backend_services=None, description=None, desired_capacity=None, disks=None, draining_timeout=None, fallback_to_ondemand=None, gpu=None, health_check_grace_period=None, instance_types_customs=None, instance_types_ondemand=None, instance_types_preemptibles=None, ip_forwarding=None, labels=None, max_size=None, metadatas=None, min_size=None, name=None, network_interfaces=None, ondemand_count=None, preemptible_percentage=None, scaling_down_policies=None, scaling_up_policies=None, service_account=None, startup_script=None, subnets=None, tags=None, __name__=None, __opts__=None):
        """
        Provides a Spotinst elastigroup GCP resource.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] availability_zones: List of availability zones for the group.
        :param pulumi.Input[list] backend_services: Describes the backend service configurations.
        :param pulumi.Input[str] description: The region your GCP group will be created in.
        :param pulumi.Input[int] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[int] draining_timeout: Time (seconds) the instance is allowed to run after it is detached from the group. This is to allow the instance time to drain all the current TCP connections before terminating it.
        :param pulumi.Input[list] gpu: Defines the GPU configuration.
        :param pulumi.Input[int] health_check_grace_period: Period of time (seconds) to wait for VM to reach healthiness before monitoring for unhealthiness.
        :param pulumi.Input[list] instance_types_customs: Defines a set of custom instance types. Required if instance_types_preemptible and instance_types_on_demand are not set.
        :param pulumi.Input[list] instance_types_preemptibles: The preemptible VMs instance type. To maximize cost savings and market availability, select as many types as possible. Required if instance_types_on_demand is not set.
        :param pulumi.Input[list] labels: Array of objects with key-value pairs.
        :param pulumi.Input[int] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[list] metadatas: Array of objects with key-value pairs.
        :param pulumi.Input[int] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: Name of this access configuration.
        :param pulumi.Input[list] network_interfaces: Array of objects representing the network configuration for the elastigroup.
        :param pulumi.Input[int] preemptible_percentage: Percentage of Preemptible VMs to spin up from the "desired_capacity".
        :param pulumi.Input[list] scaling_down_policies: Contains scaling policies for scaling the Elastigroup down.
        :param pulumi.Input[list] scaling_up_policies: Contains scaling policies for scaling the Elastigroup up.
        :param pulumi.Input[str] service_account: The email of the service account in which the group instances will be launched.
        :param pulumi.Input[str] startup_script: Create and run your own startup scripts on your virtual machines to perform automated tasks every time your instance boots up.
        :param pulumi.Input[list] subnets: A list of regions and subnets.
        :param pulumi.Input[list] tags: Tags to mark created instances.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['availability_zones'] = availability_zones

        __props__['backend_services'] = backend_services

        __props__['description'] = description

        if desired_capacity is None:
            raise TypeError('Missing required property desired_capacity')
        __props__['desired_capacity'] = desired_capacity

        __props__['disks'] = disks

        __props__['draining_timeout'] = draining_timeout

        __props__['fallback_to_ondemand'] = fallback_to_ondemand

        __props__['gpu'] = gpu

        __props__['health_check_grace_period'] = health_check_grace_period

        __props__['instance_types_customs'] = instance_types_customs

        __props__['instance_types_ondemand'] = instance_types_ondemand

        __props__['instance_types_preemptibles'] = instance_types_preemptibles

        __props__['ip_forwarding'] = ip_forwarding

        __props__['labels'] = labels

        __props__['max_size'] = max_size

        __props__['metadatas'] = metadatas

        __props__['min_size'] = min_size

        if name is None:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        __props__['network_interfaces'] = network_interfaces

        __props__['ondemand_count'] = ondemand_count

        __props__['preemptible_percentage'] = preemptible_percentage

        __props__['scaling_down_policies'] = scaling_down_policies

        __props__['scaling_up_policies'] = scaling_up_policies

        __props__['service_account'] = service_account

        __props__['startup_script'] = startup_script

        __props__['subnets'] = subnets

        __props__['tags'] = tags

        super(Elastigroup, __self__).__init__(
            'spotinst:gcp/elastigroup:Elastigroup',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

