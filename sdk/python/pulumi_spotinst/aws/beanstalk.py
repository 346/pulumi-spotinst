# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Beanstalk(pulumi.CustomResource):
    beanstalk_environment_id: pulumi.Output[str]
    """
    The id of an existing Beanstalk environment. 
    """
    beanstalk_environment_name: pulumi.Output[str]
    """
    The name of an existing Beanstalk environment.
    """
    deployment_preferences: pulumi.Output[dict]
    """
    Preferences when performing a roll
    """
    desired_capacity: pulumi.Output[int]
    """
    The desired number of instances the group should have at any time.
    """
    instance_types_spots: pulumi.Output[list]
    """
    One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
    """
    maintenance: pulumi.Output[str]
    managed_actions: pulumi.Output[dict]
    """
    Managed Actions parameters
    """
    max_size: pulumi.Output[int]
    """
    The maximum number of instances the group should have at any time.
    """
    min_size: pulumi.Output[int]
    """
    The minimum number of instances the group should have at any time.
    """
    name: pulumi.Output[str]
    """
    The group name.
    """
    product: pulumi.Output[str]
    """
    Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
    For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
    """
    region: pulumi.Output[str]
    """
    The AWS region your group will be created in. Cannot be changed after the group has been created.
    """
    def __init__(__self__, resource_name, opts=None, beanstalk_environment_id=None, beanstalk_environment_name=None, deployment_preferences=None, desired_capacity=None, instance_types_spots=None, maintenance=None, managed_actions=None, max_size=None, min_size=None, name=None, product=None, region=None, __name__=None, __opts__=None):
        """
        Provides a Spotinst AWS group resource using Elastic Beanstalk.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] beanstalk_environment_id: The id of an existing Beanstalk environment. 
        :param pulumi.Input[str] beanstalk_environment_name: The name of an existing Beanstalk environment.
        :param pulumi.Input[dict] deployment_preferences: Preferences when performing a roll
        :param pulumi.Input[int] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[list] instance_types_spots: One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
        :param pulumi.Input[str] maintenance
        :param pulumi.Input[dict] managed_actions: Managed Actions parameters
        :param pulumi.Input[int] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[int] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: The group name.
        :param pulumi.Input[str] product: Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
               For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
        :param pulumi.Input[str] region: The AWS region your group will be created in. Cannot be changed after the group has been created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['beanstalk_environment_id'] = beanstalk_environment_id

        __props__['beanstalk_environment_name'] = beanstalk_environment_name

        __props__['deployment_preferences'] = deployment_preferences

        if desired_capacity is None:
            raise TypeError('Missing required property desired_capacity')
        __props__['desired_capacity'] = desired_capacity

        if instance_types_spots is None:
            raise TypeError('Missing required property instance_types_spots')
        __props__['instance_types_spots'] = instance_types_spots

        __props__['maintenance'] = maintenance

        __props__['managed_actions'] = managed_actions

        if max_size is None:
            raise TypeError('Missing required property max_size')
        __props__['max_size'] = max_size

        if min_size is None:
            raise TypeError('Missing required property min_size')
        __props__['min_size'] = min_size

        if name is None:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        if product is None:
            raise TypeError('Missing required property product')
        __props__['product'] = product

        if region is None:
            raise TypeError('Missing required property region')
        __props__['region'] = region

        super(Beanstalk, __self__).__init__(
            'spotinst:aws/beanstalk:Beanstalk',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

