// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class TargetSet extends pulumi.CustomResource {
    /**
     * Get an existing TargetSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetSetState, opts?: pulumi.CustomResourceOptions): TargetSet {
        return new TargetSet(name, <any>state, { ...opts, id: id });
    }

    public readonly balancerId: pulumi.Output<string>;
    public readonly deploymentId: pulumi.Output<string>;
    public readonly healthCheck: pulumi.Output<{ healthyThreshold: number, interval: number, path: string, port: number, protocol: string, timeout: number, unhealthyThreshold: number }>;
    public readonly name: pulumi.Output<string | undefined>;
    public readonly port: pulumi.Output<number | undefined>;
    public readonly protocol: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{ key: string, value: string }[] | undefined>;
    public readonly weight: pulumi.Output<number>;

    /**
     * Create a TargetSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetSetArgs | TargetSetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: TargetSetState = argsOrState as TargetSetState | undefined;
            inputs["balancerId"] = state ? state.balancerId : undefined;
            inputs["deploymentId"] = state ? state.deploymentId : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as TargetSetArgs | undefined;
            if (!args || args.balancerId === undefined) {
                throw new Error("Missing required property 'balancerId'");
            }
            if (!args || args.deploymentId === undefined) {
                throw new Error("Missing required property 'deploymentId'");
            }
            if (!args || args.healthCheck === undefined) {
                throw new Error("Missing required property 'healthCheck'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            if (!args || args.weight === undefined) {
                throw new Error("Missing required property 'weight'");
            }
            inputs["balancerId"] = args ? args.balancerId : undefined;
            inputs["deploymentId"] = args ? args.deploymentId : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["weight"] = args ? args.weight : undefined;
        }
        super("spotinst:multai/targetSet:TargetSet", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TargetSet resources.
 */
export interface TargetSetState {
    readonly balancerId?: pulumi.Input<string>;
    readonly deploymentId?: pulumi.Input<string>;
    readonly healthCheck?: pulumi.Input<{ healthyThreshold: pulumi.Input<number>, interval: pulumi.Input<number>, path: pulumi.Input<string>, port?: pulumi.Input<number>, protocol: pulumi.Input<string>, timeout: pulumi.Input<number>, unhealthyThreshold: pulumi.Input<number> }>;
    readonly name?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TargetSet resource.
 */
export interface TargetSetArgs {
    readonly balancerId: pulumi.Input<string>;
    readonly deploymentId: pulumi.Input<string>;
    readonly healthCheck: pulumi.Input<{ healthyThreshold: pulumi.Input<number>, interval: pulumi.Input<number>, path: pulumi.Input<string>, port?: pulumi.Input<number>, protocol: pulumi.Input<string>, timeout: pulumi.Input<number>, unhealthyThreshold: pulumi.Input<number> }>;
    readonly name?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly protocol: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly weight: pulumi.Input<number>;
}
