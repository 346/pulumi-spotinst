// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Ocean extends pulumi.CustomResource {
    /**
     * Get an existing Ocean resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanState, opts?: pulumi.CustomResourceOptions): Ocean {
        return new Ocean(name, <any>state, { ...opts, id: id });
    }

    public readonly associatePublicIpAddress: pulumi.Output<boolean | undefined>;
    public readonly autoscaler: pulumi.Output<{ autoscaleCooldown?: number, autoscaleDown?: { evaluationPeriods?: number }, autoscaleHeadroom?: { cpuPerUnit?: number, gpuPerUnit?: number, memoryPerUnit?: number, numOfUnits?: number }, autoscaleIsAutoConfig?: boolean, autoscaleIsEnabled?: boolean, resourceLimits?: { maxMemoryGib?: number, maxVcpu?: number } } | undefined>;
    public readonly blacklists: pulumi.Output<string[] | undefined>;
    public readonly controllerId: pulumi.Output<string | undefined>;
    public readonly desiredCapacity: pulumi.Output<number>;
    public readonly fallbackToOndemand: pulumi.Output<boolean | undefined>;
    public readonly iamInstanceProfile: pulumi.Output<string | undefined>;
    public readonly imageId: pulumi.Output<string | undefined>;
    public readonly keyName: pulumi.Output<string | undefined>;
    public readonly loadBalancers: pulumi.Output<{ arn?: string, name?: string, type?: string }[] | undefined>;
    public readonly maxSize: pulumi.Output<number>;
    public readonly minSize: pulumi.Output<number>;
    public readonly name: pulumi.Output<string | undefined>;
    public readonly region: pulumi.Output<string | undefined>;
    public readonly securityGroups: pulumi.Output<string[]>;
    public readonly spotPercentage: pulumi.Output<number | undefined>;
    public readonly subnetIds: pulumi.Output<string[]>;
    public readonly tags: pulumi.Output<{ key: string, value: string }[] | undefined>;
    public readonly userData: pulumi.Output<string | undefined>;
    public readonly utilizeReservedInstances: pulumi.Output<boolean | undefined>;
    public readonly whitelists: pulumi.Output<string[] | undefined>;

    /**
     * Create a Ocean resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanArgs | OceanState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: OceanState = argsOrState as OceanState | undefined;
            inputs["associatePublicIpAddress"] = state ? state.associatePublicIpAddress : undefined;
            inputs["autoscaler"] = state ? state.autoscaler : undefined;
            inputs["blacklists"] = state ? state.blacklists : undefined;
            inputs["controllerId"] = state ? state.controllerId : undefined;
            inputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            inputs["fallbackToOndemand"] = state ? state.fallbackToOndemand : undefined;
            inputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
            inputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            inputs["maxSize"] = state ? state.maxSize : undefined;
            inputs["minSize"] = state ? state.minSize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["spotPercentage"] = state ? state.spotPercentage : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["userData"] = state ? state.userData : undefined;
            inputs["utilizeReservedInstances"] = state ? state.utilizeReservedInstances : undefined;
            inputs["whitelists"] = state ? state.whitelists : undefined;
        } else {
            const args = argsOrState as OceanArgs | undefined;
            if (!args || args.securityGroups === undefined) {
                throw new Error("Missing required property 'securityGroups'");
            }
            if (!args || args.subnetIds === undefined) {
                throw new Error("Missing required property 'subnetIds'");
            }
            inputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            inputs["autoscaler"] = args ? args.autoscaler : undefined;
            inputs["blacklists"] = args ? args.blacklists : undefined;
            inputs["controllerId"] = args ? args.controllerId : undefined;
            inputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            inputs["fallbackToOndemand"] = args ? args.fallbackToOndemand : undefined;
            inputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["spotPercentage"] = args ? args.spotPercentage : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["utilizeReservedInstances"] = args ? args.utilizeReservedInstances : undefined;
            inputs["whitelists"] = args ? args.whitelists : undefined;
        }
        super("spotinst:aws/ocean:Ocean", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ocean resources.
 */
export interface OceanState {
    readonly associatePublicIpAddress?: pulumi.Input<boolean>;
    readonly autoscaler?: pulumi.Input<{ autoscaleCooldown?: pulumi.Input<number>, autoscaleDown?: pulumi.Input<{ evaluationPeriods?: pulumi.Input<number> }>, autoscaleHeadroom?: pulumi.Input<{ cpuPerUnit?: pulumi.Input<number>, gpuPerUnit?: pulumi.Input<number>, memoryPerUnit?: pulumi.Input<number>, numOfUnits?: pulumi.Input<number> }>, autoscaleIsAutoConfig?: pulumi.Input<boolean>, autoscaleIsEnabled?: pulumi.Input<boolean>, resourceLimits?: pulumi.Input<{ maxMemoryGib?: pulumi.Input<number>, maxVcpu?: pulumi.Input<number> }> }>;
    readonly blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly controllerId?: pulumi.Input<string>;
    readonly desiredCapacity?: pulumi.Input<number>;
    readonly fallbackToOndemand?: pulumi.Input<boolean>;
    readonly iamInstanceProfile?: pulumi.Input<string>;
    readonly imageId?: pulumi.Input<string>;
    readonly keyName?: pulumi.Input<string>;
    readonly loadBalancers?: pulumi.Input<pulumi.Input<{ arn?: pulumi.Input<string>, name?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>;
    readonly maxSize?: pulumi.Input<number>;
    readonly minSize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    readonly spotPercentage?: pulumi.Input<number>;
    readonly subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly userData?: pulumi.Input<string>;
    readonly utilizeReservedInstances?: pulumi.Input<boolean>;
    readonly whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Ocean resource.
 */
export interface OceanArgs {
    readonly associatePublicIpAddress?: pulumi.Input<boolean>;
    readonly autoscaler?: pulumi.Input<{ autoscaleCooldown?: pulumi.Input<number>, autoscaleDown?: pulumi.Input<{ evaluationPeriods?: pulumi.Input<number> }>, autoscaleHeadroom?: pulumi.Input<{ cpuPerUnit?: pulumi.Input<number>, gpuPerUnit?: pulumi.Input<number>, memoryPerUnit?: pulumi.Input<number>, numOfUnits?: pulumi.Input<number> }>, autoscaleIsAutoConfig?: pulumi.Input<boolean>, autoscaleIsEnabled?: pulumi.Input<boolean>, resourceLimits?: pulumi.Input<{ maxMemoryGib?: pulumi.Input<number>, maxVcpu?: pulumi.Input<number> }> }>;
    readonly blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    readonly controllerId?: pulumi.Input<string>;
    readonly desiredCapacity?: pulumi.Input<number>;
    readonly fallbackToOndemand?: pulumi.Input<boolean>;
    readonly iamInstanceProfile?: pulumi.Input<string>;
    readonly imageId?: pulumi.Input<string>;
    readonly keyName?: pulumi.Input<string>;
    readonly loadBalancers?: pulumi.Input<pulumi.Input<{ arn?: pulumi.Input<string>, name?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>;
    readonly maxSize?: pulumi.Input<number>;
    readonly minSize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly securityGroups: pulumi.Input<pulumi.Input<string>[]>;
    readonly spotPercentage?: pulumi.Input<number>;
    readonly subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    readonly tags?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly userData?: pulumi.Input<string>;
    readonly utilizeReservedInstances?: pulumi.Input<boolean>;
    readonly whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
