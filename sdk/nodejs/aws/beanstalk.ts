// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Beanstalk extends pulumi.CustomResource {
    /**
     * Get an existing Beanstalk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BeanstalkState, opts?: pulumi.CustomResourceOptions): Beanstalk {
        return new Beanstalk(name, <any>state, { ...opts, id: id });
    }

    public readonly beanstalkEnvironmentId: pulumi.Output<string | undefined>;
    public readonly beanstalkEnvironmentName: pulumi.Output<string | undefined>;
    public readonly deploymentPreferences: pulumi.Output<{ automaticRoll?: boolean, batchSizePercentage?: number, gracePeriod?: number, strategies?: { action?: string, shouldDrainInstances?: boolean }[] } | undefined>;
    public readonly desiredCapacity: pulumi.Output<number>;
    public readonly instanceTypesSpots: pulumi.Output<string[]>;
    public readonly maintenance: pulumi.Output<string | undefined>;
    public readonly managedActions: pulumi.Output<{ platformUpdate?: { performAt?: string, timeWindow?: string, updateLevel?: string } } | undefined>;
    public readonly maxSize: pulumi.Output<number>;
    public readonly minSize: pulumi.Output<number>;
    public readonly name: pulumi.Output<string>;
    public readonly product: pulumi.Output<string>;
    public readonly region: pulumi.Output<string>;

    /**
     * Create a Beanstalk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BeanstalkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BeanstalkArgs | BeanstalkState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: BeanstalkState = argsOrState as BeanstalkState | undefined;
            inputs["beanstalkEnvironmentId"] = state ? state.beanstalkEnvironmentId : undefined;
            inputs["beanstalkEnvironmentName"] = state ? state.beanstalkEnvironmentName : undefined;
            inputs["deploymentPreferences"] = state ? state.deploymentPreferences : undefined;
            inputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            inputs["instanceTypesSpots"] = state ? state.instanceTypesSpots : undefined;
            inputs["maintenance"] = state ? state.maintenance : undefined;
            inputs["managedActions"] = state ? state.managedActions : undefined;
            inputs["maxSize"] = state ? state.maxSize : undefined;
            inputs["minSize"] = state ? state.minSize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["product"] = state ? state.product : undefined;
            inputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as BeanstalkArgs | undefined;
            if (!args || args.desiredCapacity === undefined) {
                throw new Error("Missing required property 'desiredCapacity'");
            }
            if (!args || args.instanceTypesSpots === undefined) {
                throw new Error("Missing required property 'instanceTypesSpots'");
            }
            if (!args || args.maxSize === undefined) {
                throw new Error("Missing required property 'maxSize'");
            }
            if (!args || args.minSize === undefined) {
                throw new Error("Missing required property 'minSize'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.product === undefined) {
                throw new Error("Missing required property 'product'");
            }
            if (!args || args.region === undefined) {
                throw new Error("Missing required property 'region'");
            }
            inputs["beanstalkEnvironmentId"] = args ? args.beanstalkEnvironmentId : undefined;
            inputs["beanstalkEnvironmentName"] = args ? args.beanstalkEnvironmentName : undefined;
            inputs["deploymentPreferences"] = args ? args.deploymentPreferences : undefined;
            inputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            inputs["instanceTypesSpots"] = args ? args.instanceTypesSpots : undefined;
            inputs["maintenance"] = args ? args.maintenance : undefined;
            inputs["managedActions"] = args ? args.managedActions : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["product"] = args ? args.product : undefined;
            inputs["region"] = args ? args.region : undefined;
        }
        super("spotinst:aws/beanstalk:Beanstalk", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Beanstalk resources.
 */
export interface BeanstalkState {
    readonly beanstalkEnvironmentId?: pulumi.Input<string>;
    readonly beanstalkEnvironmentName?: pulumi.Input<string>;
    readonly deploymentPreferences?: pulumi.Input<{ automaticRoll?: pulumi.Input<boolean>, batchSizePercentage?: pulumi.Input<number>, gracePeriod?: pulumi.Input<number>, strategies?: pulumi.Input<pulumi.Input<{ action?: pulumi.Input<string>, shouldDrainInstances?: pulumi.Input<boolean> }>[]> }>;
    readonly desiredCapacity?: pulumi.Input<number>;
    readonly instanceTypesSpots?: pulumi.Input<pulumi.Input<string>[]>;
    readonly maintenance?: pulumi.Input<string>;
    readonly managedActions?: pulumi.Input<{ platformUpdate?: pulumi.Input<{ performAt?: pulumi.Input<string>, timeWindow?: pulumi.Input<string>, updateLevel?: pulumi.Input<string> }> }>;
    readonly maxSize?: pulumi.Input<number>;
    readonly minSize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly product?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Beanstalk resource.
 */
export interface BeanstalkArgs {
    readonly beanstalkEnvironmentId?: pulumi.Input<string>;
    readonly beanstalkEnvironmentName?: pulumi.Input<string>;
    readonly deploymentPreferences?: pulumi.Input<{ automaticRoll?: pulumi.Input<boolean>, batchSizePercentage?: pulumi.Input<number>, gracePeriod?: pulumi.Input<number>, strategies?: pulumi.Input<pulumi.Input<{ action?: pulumi.Input<string>, shouldDrainInstances?: pulumi.Input<boolean> }>[]> }>;
    readonly desiredCapacity: pulumi.Input<number>;
    readonly instanceTypesSpots: pulumi.Input<pulumi.Input<string>[]>;
    readonly maintenance?: pulumi.Input<string>;
    readonly managedActions?: pulumi.Input<{ platformUpdate?: pulumi.Input<{ performAt?: pulumi.Input<string>, timeWindow?: pulumi.Input<string>, updateLevel?: pulumi.Input<string> }> }>;
    readonly maxSize: pulumi.Input<number>;
    readonly minSize: pulumi.Input<number>;
    readonly name: pulumi.Input<string>;
    readonly product: pulumi.Input<string>;
    readonly region: pulumi.Input<string>;
}
