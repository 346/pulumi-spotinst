// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Elastigroup extends pulumi.CustomResource {
    /**
     * Get an existing Elastigroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElastigroupState, opts?: pulumi.CustomResourceOptions): Elastigroup {
        return new Elastigroup(name, <any>state, { ...opts, id: id });
    }

    public readonly availabilityZones: pulumi.Output<string[] | undefined>;
    public readonly backendServices: pulumi.Output<{ namedPorts?: { name: string, ports: string[] }[], serviceName: string }[] | undefined>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly desiredCapacity: pulumi.Output<number>;
    public readonly disks: pulumi.Output<{ autoDelete?: boolean, boot?: boolean, deviceName?: string, initializeParams?: { diskSizeGb?: string, diskType?: string, sourceImage: string }[], interface?: string, mode?: string, source?: string, type?: string }[] | undefined>;
    public readonly drainingTimeout: pulumi.Output<number | undefined>;
    public readonly fallbackToOndemand: pulumi.Output<boolean | undefined>;
    public readonly gpu: pulumi.Output<{ count: number, type: string }[] | undefined>;
    public readonly healthCheckGracePeriod: pulumi.Output<number | undefined>;
    public readonly instanceTypesCustoms: pulumi.Output<{ memoryGib: number, vcpu: number }[] | undefined>;
    public readonly instanceTypesOndemand: pulumi.Output<string | undefined>;
    public readonly instanceTypesPreemptibles: pulumi.Output<string[] | undefined>;
    public readonly ipForwarding: pulumi.Output<boolean | undefined>;
    public readonly labels: pulumi.Output<{ key: string, value: string }[] | undefined>;
    public readonly maxSize: pulumi.Output<number>;
    public readonly metadatas: pulumi.Output<{ key: string, value: string }[] | undefined>;
    public readonly minSize: pulumi.Output<number>;
    public readonly name: pulumi.Output<string>;
    public readonly networkInterfaces: pulumi.Output<{ accessConfigs?: { name?: string, type?: string }[], aliasIpRanges?: { ipCidrRange: string, subnetworkRangeName: string }[], network: string }[] | undefined>;
    public readonly ondemandCount: pulumi.Output<number | undefined>;
    public readonly preemptiblePercentage: pulumi.Output<number | undefined>;
    public readonly scalingDownPolicies: pulumi.Output<{ actionType?: string, adjustment?: number, cooldown: number, dimensions?: {[key: string]: any}, evaluationPeriods: number, metricName: string, namespace: string, operator: string, period: number, policyName: string, source: string, statistic: string, threshold: number, unit: string }[] | undefined>;
    public readonly scalingUpPolicies: pulumi.Output<{ actionType?: string, adjustment?: number, cooldown: number, dimensions?: {[key: string]: any}, evaluationPeriods: number, metricName: string, namespace: string, operator: string, period: number, policyName: string, source: string, statistic: string, threshold: number, unit: string }[] | undefined>;
    public readonly serviceAccount: pulumi.Output<string | undefined>;
    public readonly startupScript: pulumi.Output<string | undefined>;
    public readonly subnets: pulumi.Output<{ region: string, subnetNames: string[] }[] | undefined>;
    public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a Elastigroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElastigroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElastigroupArgs | ElastigroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ElastigroupState = argsOrState as ElastigroupState | undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["backendServices"] = state ? state.backendServices : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            inputs["disks"] = state ? state.disks : undefined;
            inputs["drainingTimeout"] = state ? state.drainingTimeout : undefined;
            inputs["fallbackToOndemand"] = state ? state.fallbackToOndemand : undefined;
            inputs["gpu"] = state ? state.gpu : undefined;
            inputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            inputs["instanceTypesCustoms"] = state ? state.instanceTypesCustoms : undefined;
            inputs["instanceTypesOndemand"] = state ? state.instanceTypesOndemand : undefined;
            inputs["instanceTypesPreemptibles"] = state ? state.instanceTypesPreemptibles : undefined;
            inputs["ipForwarding"] = state ? state.ipForwarding : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["maxSize"] = state ? state.maxSize : undefined;
            inputs["metadatas"] = state ? state.metadatas : undefined;
            inputs["minSize"] = state ? state.minSize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            inputs["ondemandCount"] = state ? state.ondemandCount : undefined;
            inputs["preemptiblePercentage"] = state ? state.preemptiblePercentage : undefined;
            inputs["scalingDownPolicies"] = state ? state.scalingDownPolicies : undefined;
            inputs["scalingUpPolicies"] = state ? state.scalingUpPolicies : undefined;
            inputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            inputs["startupScript"] = state ? state.startupScript : undefined;
            inputs["subnets"] = state ? state.subnets : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ElastigroupArgs | undefined;
            if (!args || args.desiredCapacity === undefined) {
                throw new Error("Missing required property 'desiredCapacity'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["backendServices"] = args ? args.backendServices : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            inputs["disks"] = args ? args.disks : undefined;
            inputs["drainingTimeout"] = args ? args.drainingTimeout : undefined;
            inputs["fallbackToOndemand"] = args ? args.fallbackToOndemand : undefined;
            inputs["gpu"] = args ? args.gpu : undefined;
            inputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            inputs["instanceTypesCustoms"] = args ? args.instanceTypesCustoms : undefined;
            inputs["instanceTypesOndemand"] = args ? args.instanceTypesOndemand : undefined;
            inputs["instanceTypesPreemptibles"] = args ? args.instanceTypesPreemptibles : undefined;
            inputs["ipForwarding"] = args ? args.ipForwarding : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["metadatas"] = args ? args.metadatas : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            inputs["ondemandCount"] = args ? args.ondemandCount : undefined;
            inputs["preemptiblePercentage"] = args ? args.preemptiblePercentage : undefined;
            inputs["scalingDownPolicies"] = args ? args.scalingDownPolicies : undefined;
            inputs["scalingUpPolicies"] = args ? args.scalingUpPolicies : undefined;
            inputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            inputs["startupScript"] = args ? args.startupScript : undefined;
            inputs["subnets"] = args ? args.subnets : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        super("spotinst:gcp/elastigroup:Elastigroup", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Elastigroup resources.
 */
export interface ElastigroupState {
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly backendServices?: pulumi.Input<pulumi.Input<{ namedPorts?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, ports: pulumi.Input<pulumi.Input<string>[]> }>[]>, serviceName: pulumi.Input<string> }>[]>;
    readonly description?: pulumi.Input<string>;
    readonly desiredCapacity?: pulumi.Input<number>;
    readonly disks?: pulumi.Input<pulumi.Input<{ autoDelete?: pulumi.Input<boolean>, boot?: pulumi.Input<boolean>, deviceName?: pulumi.Input<string>, initializeParams?: pulumi.Input<pulumi.Input<{ diskSizeGb?: pulumi.Input<string>, diskType?: pulumi.Input<string>, sourceImage: pulumi.Input<string> }>[]>, interface?: pulumi.Input<string>, mode?: pulumi.Input<string>, source?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>;
    readonly drainingTimeout?: pulumi.Input<number>;
    readonly fallbackToOndemand?: pulumi.Input<boolean>;
    readonly gpu?: pulumi.Input<pulumi.Input<{ count: pulumi.Input<number>, type: pulumi.Input<string> }>[]>;
    readonly healthCheckGracePeriod?: pulumi.Input<number>;
    readonly instanceTypesCustoms?: pulumi.Input<pulumi.Input<{ memoryGib: pulumi.Input<number>, vcpu: pulumi.Input<number> }>[]>;
    readonly instanceTypesOndemand?: pulumi.Input<string>;
    readonly instanceTypesPreemptibles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly ipForwarding?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly maxSize?: pulumi.Input<number>;
    readonly metadatas?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly minSize?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly networkInterfaces?: pulumi.Input<pulumi.Input<{ accessConfigs?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>, aliasIpRanges?: pulumi.Input<pulumi.Input<{ ipCidrRange: pulumi.Input<string>, subnetworkRangeName: pulumi.Input<string> }>[]>, network: pulumi.Input<string> }>[]>;
    readonly ondemandCount?: pulumi.Input<number>;
    readonly preemptiblePercentage?: pulumi.Input<number>;
    readonly scalingDownPolicies?: pulumi.Input<pulumi.Input<{ actionType?: pulumi.Input<string>, adjustment?: pulumi.Input<number>, cooldown?: pulumi.Input<number>, dimensions?: pulumi.Input<{[key: string]: any}>, evaluationPeriods?: pulumi.Input<number>, metricName: pulumi.Input<string>, namespace: pulumi.Input<string>, operator?: pulumi.Input<string>, period?: pulumi.Input<number>, policyName: pulumi.Input<string>, source?: pulumi.Input<string>, statistic?: pulumi.Input<string>, threshold: pulumi.Input<number>, unit: pulumi.Input<string> }>[]>;
    readonly scalingUpPolicies?: pulumi.Input<pulumi.Input<{ actionType?: pulumi.Input<string>, adjustment?: pulumi.Input<number>, cooldown?: pulumi.Input<number>, dimensions?: pulumi.Input<{[key: string]: any}>, evaluationPeriods?: pulumi.Input<number>, metricName: pulumi.Input<string>, namespace: pulumi.Input<string>, operator?: pulumi.Input<string>, period?: pulumi.Input<number>, policyName: pulumi.Input<string>, source?: pulumi.Input<string>, statistic?: pulumi.Input<string>, threshold: pulumi.Input<number>, unit: pulumi.Input<string> }>[]>;
    readonly serviceAccount?: pulumi.Input<string>;
    readonly startupScript?: pulumi.Input<string>;
    readonly subnets?: pulumi.Input<pulumi.Input<{ region: pulumi.Input<string>, subnetNames: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Elastigroup resource.
 */
export interface ElastigroupArgs {
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    readonly backendServices?: pulumi.Input<pulumi.Input<{ namedPorts?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, ports: pulumi.Input<pulumi.Input<string>[]> }>[]>, serviceName: pulumi.Input<string> }>[]>;
    readonly description?: pulumi.Input<string>;
    readonly desiredCapacity: pulumi.Input<number>;
    readonly disks?: pulumi.Input<pulumi.Input<{ autoDelete?: pulumi.Input<boolean>, boot?: pulumi.Input<boolean>, deviceName?: pulumi.Input<string>, initializeParams?: pulumi.Input<pulumi.Input<{ diskSizeGb?: pulumi.Input<string>, diskType?: pulumi.Input<string>, sourceImage: pulumi.Input<string> }>[]>, interface?: pulumi.Input<string>, mode?: pulumi.Input<string>, source?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>;
    readonly drainingTimeout?: pulumi.Input<number>;
    readonly fallbackToOndemand?: pulumi.Input<boolean>;
    readonly gpu?: pulumi.Input<pulumi.Input<{ count: pulumi.Input<number>, type: pulumi.Input<string> }>[]>;
    readonly healthCheckGracePeriod?: pulumi.Input<number>;
    readonly instanceTypesCustoms?: pulumi.Input<pulumi.Input<{ memoryGib: pulumi.Input<number>, vcpu: pulumi.Input<number> }>[]>;
    readonly instanceTypesOndemand?: pulumi.Input<string>;
    readonly instanceTypesPreemptibles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly ipForwarding?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly maxSize?: pulumi.Input<number>;
    readonly metadatas?: pulumi.Input<pulumi.Input<{ key: pulumi.Input<string>, value: pulumi.Input<string> }>[]>;
    readonly minSize?: pulumi.Input<number>;
    readonly name: pulumi.Input<string>;
    readonly networkInterfaces?: pulumi.Input<pulumi.Input<{ accessConfigs?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>, aliasIpRanges?: pulumi.Input<pulumi.Input<{ ipCidrRange: pulumi.Input<string>, subnetworkRangeName: pulumi.Input<string> }>[]>, network: pulumi.Input<string> }>[]>;
    readonly ondemandCount?: pulumi.Input<number>;
    readonly preemptiblePercentage?: pulumi.Input<number>;
    readonly scalingDownPolicies?: pulumi.Input<pulumi.Input<{ actionType?: pulumi.Input<string>, adjustment?: pulumi.Input<number>, cooldown?: pulumi.Input<number>, dimensions?: pulumi.Input<{[key: string]: any}>, evaluationPeriods?: pulumi.Input<number>, metricName: pulumi.Input<string>, namespace: pulumi.Input<string>, operator?: pulumi.Input<string>, period?: pulumi.Input<number>, policyName: pulumi.Input<string>, source?: pulumi.Input<string>, statistic?: pulumi.Input<string>, threshold: pulumi.Input<number>, unit: pulumi.Input<string> }>[]>;
    readonly scalingUpPolicies?: pulumi.Input<pulumi.Input<{ actionType?: pulumi.Input<string>, adjustment?: pulumi.Input<number>, cooldown?: pulumi.Input<number>, dimensions?: pulumi.Input<{[key: string]: any}>, evaluationPeriods?: pulumi.Input<number>, metricName: pulumi.Input<string>, namespace: pulumi.Input<string>, operator?: pulumi.Input<string>, period?: pulumi.Input<number>, policyName: pulumi.Input<string>, source?: pulumi.Input<string>, statistic?: pulumi.Input<string>, threshold: pulumi.Input<number>, unit: pulumi.Input<string> }>[]>;
    readonly serviceAccount?: pulumi.Input<string>;
    readonly startupScript?: pulumi.Input<string>;
    readonly subnets?: pulumi.Input<pulumi.Input<{ region: pulumi.Input<string>, subnetNames: pulumi.Input<pulumi.Input<string>[]> }>[]>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
